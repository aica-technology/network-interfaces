FROM ghcr.io/aica-technology/ros2-modulo-control:humble as base
USER ${USER}

FROM base as apt-dependencies
RUN <<HEREDOC
PACKAGES="libzmq3-dev"
mkdir -p /tmp/apt

sudo apt-get update
# We then do a dry-run and parse the output of apt to gather the list of packages to be installed
# Example output:
# ```
# #########
# NOTE: This is only a simulation!
#       apt-get needs root privileges for real execution.
#       Keep also in mind that locking is deactivated,
#       so don't depend on the relevance to the real current situation!
# Reading package lists...
# Building dependency tree...
# Reading state information...
# The following additional packages will be installed:
#   libavutil56 libblosc1
# The following NEW packages will be installed:
#   libavutil56 libblosc1
# 0 upgraded, 5 newly installed, 0 to remove and 28 not upgraded.
# Inst libavutil56 (7:4.4.2-0ubuntu0.22.04.1 Ubuntu:22.04/jammy-updates, Ubuntu:22.04/jammy-security [arm64])
# Inst libblosc1 (1.21.1+ds2-2 Ubuntu:22.04/jammy [arm64])
# Conf libavutil56 (7:4.4.2-0ubuntu0.22.04.1 Ubuntu:22.04/jammy-updates, Ubuntu:22.04/jammy-security [arm64])
# Conf libblosc1 (1.21.1+ds2-2 Ubuntu:22.04/jammy [arm64])
# ```
# Transformed into:
# ```
# libavutil56
# libblosc1
# ```
apt-get install ${PACKAGES} --dry-run \
  | grep -e '^Inst ' \
  | sed -E 's/^Inst (\S+) .*$/\1/' > /tmp/new-packages.txt
# Then we install apt packages like normal
sudo apt-get install -y ${PACKAGES}
# Finally we use dpkg to get all files installed by those packages and copy them to a new root
#  - get list of files installed by all the packages
#  - remove empty lines
#  - sort
#  - remove duplicates
#  - copy files while keeping file hierarchy and preserving links as-is
#  - remove "omitting directory" messages (we don't do recursive copy as we only want specific files) for cleaner output
xargs -a /tmp/new-packages.txt dpkg-query -L \
  | sed '/^$/d' | sort | uniq \
  | xargs -d "\n" cp --parents -dp -t /tmp/apt  2>&1 \
  | grep -v 'omitting directory'
# this root can then be copied to / to install everything globally or use LD_LIBRARY_PATH to use it locally
HEREDOC

FROM base as python
COPY --chown=${USER}:${USER} ./python /python
RUN \
  --mount=type=cache,target=${HOME}/.cache,id=pip-${TARGETPLATFORM},uid=1000 \
  --mount=type=ssh,uid=1000 \
  python3 -m pip install --prefix=/tmp/python /python
RUN mkdir -p /tmp/python-home/${HOME}/.local/lib/python3.10/ \
  && mv /tmp/python/local/lib/python3.10/dist-packages/ /tmp/python-home/${HOME}/.local/lib/python3.10/site-packages/ \
  && sudo chown root:root /tmp/python-home/home/

FROM base as code
WORKDIR /src
COPY --from=apt-dependencies /tmp/apt /
COPY --chown=${USER}:${USER} . /src

FROM code as development
COPY --from=python /tmp/python/local/lib/python3.10/dist-packages/ ${HOME}/.local/lib/python3.10/site-packages/

FROM code as build
RUN \
  --mount=type=cache,target=./build,id=cmake-${TARGETPLATFORM},uid=1000 \
  --mount=type=ssh,uid=1000 \
  cmake -B build \
  && cmake --build build

FROM build as test
RUN \
  --mount=type=cache,target=./build,id=cmake-${TARGETPLATFORM},uid=1000 \
  --mount=type=ssh,uid=1000 \
  cmake -B build -DBUILD_TESTING=ON \
  && CTEST_OUTPUT_ON_FAILURE=1 cmake --build build --target all test
COPY --from=python /tmp/python/local/lib/python3.10/dist-packages/ ${HOME}/.local/lib/python3.10/site-packages/
RUN python3 -m unittest discover python/test --verbose

FROM build as install
RUN \
  --mount=type=cache,target=./build,id=cmake-${TARGETPLATFORM},uid=1000 \
  --mount=type=ssh,uid=1000 \
  cmake -B build -DCMAKE_INSTALL_PREFIX=/tmp/net-ifaces \
  && cmake --build build --target all install

FROM scratch as production
COPY --from=apt-dependencies /tmp/apt /
COPY --from=install /tmp/net-ifaces /usr/local
COPY --from=python /tmp/python-home/ /
